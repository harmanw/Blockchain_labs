
contract Bank {
    
    mapping (address => uint256) public balances;
    
    // Log Statements
    event LOG(string message, uint256 value);
    event LOGtransfer(string message, address to, uint256 value);
    
    constructor () public payable {}
    
    function createAccount() payable public {
        balances[msg.sender] = 0;
        emit LOG("Account Created !", 0);
    }
    
    function deposit() payable public{
        balances[msg.sender] += msg.value;
        emit LOG("Deposit complete! Total Bank balance is :", balances[msg.sender]);
    }
    
    function withdraw(uint x) payable public {
        require(balances[msg.sender] >= x, "Not enough Funds !");
        balances[msg.sender] -=x;
        sendMoney(msg.sender, x);
    } 
    
    function sendMoney(address user, uint256 amount) private {
        (bool success) = user.call.value(amount)("");    // Calls callback function in Attacker
        if (!success) revert();
        emit LOGtransfer("Money sent !", user, amount);
    }
    
    function checkMyBalance() public {
        require(balances[msg.sender] > 0, "You either have no account or a balance of 0");
        emit LOG("Your account balance is: ", balances[msg.sender]);
    }
    
    function checkBankBalance() public {
        emit LOG("The bank is holding a total value of (wei): ", address(this).balance);
    }
}
